## Author: Author: Rodrigo Marins Piaba (Fanaticos4tech)

## E-Mail: rodrigomarinsp@gmail.com / fanaticos4tech@gmail.com

## GitHub: github.com/rodrigomarinsp/github-security-pipeline

## Website: http://github.com/rodrigomarinsp/github-security-pipeline/index.html

name: üõ°Ô∏è Security Scanning

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    - cron: '0 7 * * *'  # Run every day at 7 AM UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  security-scan:
    name: üîç Comprehensive Security Scan
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            scan-depth: thorough
          - os: windows-latest
            scan-depth: standard
          - os: macos-latest
            scan-depth: standard
    
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for better secret detection
      
      - name: üèóÔ∏è Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install gitleaks detect-secrets
      
      - name: üîí Run secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml
          GITLEAKS_REPORT: gitleaks-report.json
      
      - name: üìä Generate secret scanning report
        if: always()
        run: |
          python scripts/generate_security_report.py --input gitleaks-report.json --output security-report.md
      
      - name: üß™ Run dependency vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'dependency-report.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: üì§ Upload security analysis results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: dependency-report.sarif
      
      - name: üè∑Ô∏è Create GitHub issues for vulnerabilities
        if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              const reportPath = 'security-report.md';
              if (fs.existsSync(reportPath)) {
                const reportContent = fs.readFileSync(reportPath, 'utf8');
                if (reportContent.includes('CRITICAL') || reportContent.includes('HIGH')) {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: 'üö® Security vulnerabilities detected',
                    body: reportContent,
                    labels: ['security', 'vulnerability', 'automated'],
                  });
                }
              }
            } catch (error) {
              console.error('Error creating issue:', error);
            }
      
      - name: üìù Publish scan summary
        if: always()
        run: |
          echo "### üõ°Ô∏è Security Scan Results - ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "Security scan completed with scan depth: ${{ matrix.scan-depth }}" >> $GITHUB_STEP_SUMMARY
          echo "| Check Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          
          # Add secret scan results
          SECRET_COUNT=$(grep -c "CRITICAL\|HIGH" gitleaks-report.json || echo "0")
          if [ "$SECRET_COUNT" -gt "0" ]; then
            echo "| Secret Detection | ‚ùå Failed | $SECRET_COUNT issues found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Secret Detection | ‚úÖ Passed | No critical issues |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add dependency scan results
          DEP_COUNT=$(grep -c "CRITICAL\|HIGH" dependency-report.sarif || echo "0")
          if [ "$DEP_COUNT" -gt "0" ]; then
            echo "| Dependency Check | ‚ùå Failed | $DEP_COUNT vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Dependency Check | ‚úÖ Passed | No critical vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash

  code-quality:
    name: üë®‚Äçüíª Code Quality Analysis
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      security-events: write
      
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v3
        
      - name: üîé Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python, go, java, ruby
          queries: security-and-quality
          config-file: ./.github/codeql.yml
      
      - name: üß™ Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  notify:
    name: üì¢ Notification
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    if: always()
    steps:
      - name: üìß Send Notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "üõ°Ô∏è Security Scan Results: ${{ job.status == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üõ°Ô∏è Security Scan Results for ${{ github.repository }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:* ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:* ${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by:* ${{ github.event_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
