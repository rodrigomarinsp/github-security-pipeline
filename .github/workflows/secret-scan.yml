## Author: Author: Rodrigo Marins Piaba (Fanaticos4tech)

## E-Mail: rodrigomarinsp@gmail.com / fanaticos4tech@gmail.com

## GitHub: github.com/rodrigomarinsp/github-security-pipeline

## Website: http://github.com/rodrigomarinsp/github-security-pipeline/index.html

name: 🔒 Secret Detection

on:
  push:
    branches: [ '*' ]
  pull_request:
    types: [opened, synchronize]
  schedule:
    - cron: '0 1 * * *'  # Run every day at 1 AM UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  detect-secrets:
    name: 🔍 Detect Secrets
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          
      - name: 🔎 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: 🛠️ Install Gitleaks
        run: |
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.16.1/gitleaks_8.16.1_linux_x64.tar.gz
          tar -xzf gitleaks_8.16.1_linux_x64.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/
          
      - name: 📦 Install detect-secrets
        run: |
          python -m pip install --upgrade pip
          pip install detect-secrets
          
      - name: 🧪 Run Gitleaks
        id: gitleaks
        run: |
          mkdir -p reports
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PR events, only scan new/modified content
            gitleaks detect --source="." --report-path=reports/gitleaks-report.json               --report-format=json --no-git --verbose --redact               --config=.gitleaks.toml || true
          else
            # For other events, scan entire repository history
            gitleaks detect --source="." --report-path=reports/gitleaks-report.json               --report-format=json --verbose --redact               --config=.gitleaks.toml || true
          fi
          
          if [ -s reports/gitleaks-report.json ]; then
            echo "Found potential secrets, see report for details."
            echo "SECRETS_FOUND=true" >> $GITHUB_OUTPUT
          else
            echo "No secrets found."
            echo "SECRETS_FOUND=false" >> $GITHUB_OUTPUT
          fi

      - name: 🧪 Run detect-secrets
        id: detect_secrets
        run: |
          # Run detect-secrets and save results
          detect-secrets scan --all-files --exclude-files '\.github/workflows/.*' > reports/detect-secrets-report.json
          
          # Check if any secrets were found (non-empty results)
          if [ "$(jq 'has("results")' reports/detect-secrets-report.json)" = "true" ] &&              [ "$(jq '.results | length > 0' reports/detect-secrets-report.json)" = "true" ]; then
            echo "Found potential secrets with detect-secrets."
            echo "SECRETS_FOUND=true" >> $GITHUB_OUTPUT
          else
            echo "No secrets found with detect-secrets."
            echo "SECRETS_FOUND=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔍 Analyze custom patterns
        id: custom_patterns
        run: |
          # Check for custom security patterns like API keys, tokens, etc.
          # using more targeted regex for higher precision
          
          mkdir -p reports
          
          # Define patterns to search for
          cat > patterns.txt <<EOF
          # AWS Keys
          (A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}
          
          # GitHub Personal Access Token
          ghp_[a-zA-Z0-9]{36}
          github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59}
          
          # Database Connection Strings
          jdbc:[a-z]+://[a-zA-Z0-9\.\-_:]+/[a-zA-Z0-9\.\-_]+(\?user=[a-zA-Z0-9\.\-_]+&password=[^&\s]+)
          
          # Generic API Keys
          api[_-]?key[_-]?([a-zA-Z0-9]{32,45})
          
          # Authentication tokens
          bearer [a-zA-Z0-9_\-\.=]+
          authorization: basic [a-zA-Z0-9_\-\.=]+
          authorization: token [a-zA-Z0-9_\-\.=]+
          
          # SSH Private Keys
          -----BEGIN RSA PRIVATE KEY-----
          -----BEGIN DSA PRIVATE KEY-----
          -----BEGIN EC PRIVATE KEY-----
          -----BEGIN OPENSSH PRIVATE KEY-----
          
          # Certificate files
          -----BEGIN CERTIFICATE-----
          
          # Encryption keys
          -----BEGIN PGP PRIVATE KEY BLOCK-----
          EOF
          
          # Count matches, excluding false positives and test fixtures
          FOUND_COUNT=0
          while IFS= read -r line; do
            # Skip comments and empty lines
            [[ "$line" =~ ^#.*$ ]] && continue
            [[ -z "$line" ]] && continue
            
            MATCHES=$(find . -type f               -not -path "*/node_modules/*"               -not -path "*/vendor/*"               -not -path "*/.git/*"               -not -path "*/test/fixtures/*"               -not -path "*/tests/data/*"               -exec grep -l -E "$line" {} \; | wc -l)
            
            FOUND_COUNT=$((FOUND_COUNT + MATCHES))
          done < patterns.txt
          
          if [ "$FOUND_COUNT" -gt 0 ]; then
            echo "Found $FOUND_COUNT potential security issues with custom patterns."
            echo "SECRETS_FOUND=true" >> $GITHUB_OUTPUT
          else
            echo "No issues found with custom patterns."
            echo "SECRETS_FOUND=false" >> $GITHUB_OUTPUT
          fi

      - name: 📄 Generate Final Report
        if: steps.gitleaks.outputs.SECRETS_FOUND == 'true' || steps.detect_secrets.outputs.SECRETS_FOUND == 'true' || steps.custom_patterns.outputs.SECRETS_FOUND == 'true'
        run: |
          cat > reports/secret-scan-summary.md << EOF
          # 🔒 Secret Detection Report
          
          ## Summary
          
          The automated secret scanning tools have identified potential secrets or sensitive data in this repository.
          
          | Tool | Secrets Found | Risk Level |
          | ---- | ------------ | ---------- |
          | Gitleaks | ${{ steps.gitleaks.outputs.SECRETS_FOUND == 'true' && '⚠️ Yes' || '✅ No' }} | ${{ steps.gitleaks.outputs.SECRETS_FOUND == 'true' && '🔴 High' || '🟢 None' }} |
          | detect-secrets | ${{ steps.detect_secrets.outputs.SECRETS_FOUND == 'true' && '⚠️ Yes' || '✅ No' }} | ${{ steps.detect_secrets.outputs.SECRETS_FOUND == 'true' && '🔴 High' || '🟢 None' }} |
          | Custom Patterns | ${{ steps.custom_patterns.outputs.SECRETS_FOUND == 'true' && '⚠️ Yes' || '✅ No' }} | ${{ steps.custom_patterns.outputs.SECRETS_FOUND == 'true' && '🔴 High' || '🟢 None' }} |
          
          ## 🚨 Action Required
          
          Potential secrets have been detected in this repository. This is a security risk that needs immediate attention.
          
          ### Next Steps
          
          1. **Review the detected secrets** in the reports
          2. **Revoke any exposed credentials** immediately
          3. **Remove the secrets** from the repository
          4. **Use secure methods** to store secrets:
             - GitHub Secrets
             - Environment variables
             - Secret management services
          5. **Add false positives** to the `.gitleaks.allow` file
          
          ## Resources
          
          - [GitHub Secret Scanning](https://docs.github.com/en/code-security/secret-scanning)
          - [Secret Management Best Practices](https://security-pipeline.example.com/docs/secrets)
          - [How to Properly Rotate Credentials](https://security-pipeline.example.com/guides/credential-rotation)
          EOF

      - name: 🚨 Block PR if secrets are found
        if: github.event_name == 'pull_request' && (steps.gitleaks.outputs.SECRETS_FOUND == 'true' || steps.detect_secrets.outputs.SECRETS_FOUND == 'true' || steps.custom_patterns.outputs.SECRETS_FOUND == 'true')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the summary report
            const reportContent = fs.readFileSync('reports/secret-scan-summary.md', 'utf8');
            
            // Create or update comment on PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => {
              return comment.user.login === 'github-actions[bot]' && 
                    comment.body.includes('Secret Detection Report');
            });
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: reportContent
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reportContent
              });
            }
            
            // Block the PR by creating a review
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'REQUEST_CHANGES',
              body: '🚫 **This PR is blocked due to detected secrets**

Please review the security scan results and remove any secrets or credentials from this PR. Once removed, request a re-review.'
            });
            
            core.setFailed('Pull request blocked due to potential secrets detected.');

      - name: 📊 Upload scan results as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: secret-scan-results
          path: reports/
          retention-days: 5

      - name: 📝 Publish scan summary
        if: always()
        run: |
          echo "### 🔒 Secret Detection Results" >> $GITHUB_STEP_SUMMARY
          
          echo "| Tool | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          
          # Gitleaks results
          if [ "${{ steps.gitleaks.outputs.SECRETS_FOUND }}" == "true" ]; then
            echo "| Gitleaks | ❌ Failed | Secrets detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Gitleaks | ✅ Passed | No secrets found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # detect-secrets results
          if [ "${{ steps.detect_secrets.outputs.SECRETS_FOUND }}" == "true" ]; then
            echo "| detect-secrets | ❌ Failed | Secrets detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| detect-secrets | ✅ Passed | No secrets found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Custom patterns results
          if [ "${{ steps.custom_patterns.outputs.SECRETS_FOUND }}" == "true" ]; then
            echo "| Custom Patterns | ❌ Failed | Sensitive data detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Custom Patterns | ✅ Passed | No sensitive data found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status
          if [ "${{ steps.gitleaks.outputs.SECRETS_FOUND }}" == "true" ] || [ "${{ steps.detect_secrets.outputs.SECRETS_FOUND }}" == "true" ] || [ "${{ steps.custom_patterns.outputs.SECRETS_FOUND }}" == "true" ]; then
            echo "### ⚠️ Action Required" >> $GITHUB_STEP_SUMMARY
            echo "Potential secrets detected. See the detailed report in the workflow artifacts." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ All Clear" >> $GITHUB_STEP_SUMMARY
            echo "No secrets or sensitive data detected in this scan." >> $GITHUB_STEP_SUMMARY
          fi
